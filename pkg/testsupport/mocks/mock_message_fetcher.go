// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/message_fetcher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/didil/inhooks/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageFetcher is a mock of MessageFetcher interface.
type MockMessageFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockMessageFetcherMockRecorder
}

// MockMessageFetcherMockRecorder is the mock recorder for MockMessageFetcher.
type MockMessageFetcherMockRecorder struct {
	mock *MockMessageFetcher
}

// NewMockMessageFetcher creates a new mock instance.
func NewMockMessageFetcher(ctrl *gomock.Controller) *MockMessageFetcher {
	mock := &MockMessageFetcher{ctrl: ctrl}
	mock.recorder = &MockMessageFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageFetcher) EXPECT() *MockMessageFetcherMockRecorder {
	return m.recorder
}

// GetMessageForProcessing mocks base method.
func (m *MockMessageFetcher) GetMessageForProcessing(ctx context.Context, timeout time.Duration, flowID, sinkID string) (*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageForProcessing", ctx, timeout, flowID, sinkID)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageForProcessing indicates an expected call of GetMessageForProcessing.
func (mr *MockMessageFetcherMockRecorder) GetMessageForProcessing(ctx, timeout, flowID, sinkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageForProcessing", reflect.TypeOf((*MockMessageFetcher)(nil).GetMessageForProcessing), ctx, timeout, flowID, sinkID)
}
