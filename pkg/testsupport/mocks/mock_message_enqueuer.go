// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/message_enqueuer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/didil/inhooks/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageEnqueuer is a mock of MessageEnqueuer interface.
type MockMessageEnqueuer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageEnqueuerMockRecorder
}

// MockMessageEnqueuerMockRecorder is the mock recorder for MockMessageEnqueuer.
type MockMessageEnqueuerMockRecorder struct {
	mock *MockMessageEnqueuer
}

// NewMockMessageEnqueuer creates a new mock instance.
func NewMockMessageEnqueuer(ctrl *gomock.Controller) *MockMessageEnqueuer {
	mock := &MockMessageEnqueuer{ctrl: ctrl}
	mock.recorder = &MockMessageEnqueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageEnqueuer) EXPECT() *MockMessageEnqueuerMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockMessageEnqueuer) Enqueue(ctx context.Context, messages []*models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockMessageEnqueuerMockRecorder) Enqueue(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockMessageEnqueuer)(nil).Enqueue), ctx, messages)
}
