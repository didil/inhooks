// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/processing_recovery_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/didil/inhooks/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProcessingRecoveryService is a mock of ProcessingRecoveryService interface.
type MockProcessingRecoveryService struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingRecoveryServiceMockRecorder
}

// MockProcessingRecoveryServiceMockRecorder is the mock recorder for MockProcessingRecoveryService.
type MockProcessingRecoveryServiceMockRecorder struct {
	mock *MockProcessingRecoveryService
}

// NewMockProcessingRecoveryService creates a new mock instance.
func NewMockProcessingRecoveryService(ctrl *gomock.Controller) *MockProcessingRecoveryService {
	mock := &MockProcessingRecoveryService{ctrl: ctrl}
	mock.recorder = &MockProcessingRecoveryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingRecoveryService) EXPECT() *MockProcessingRecoveryServiceMockRecorder {
	return m.recorder
}

// AddToCache mocks base method.
func (m *MockProcessingRecoveryService) AddToCache(mID string, ttl time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToCache", mID, ttl)
}

// AddToCache indicates an expected call of AddToCache.
func (mr *MockProcessingRecoveryServiceMockRecorder) AddToCache(mID, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCache", reflect.TypeOf((*MockProcessingRecoveryService)(nil).AddToCache), mID, ttl)
}

// MoveProcessingToReady mocks base method.
func (m *MockProcessingRecoveryService) MoveProcessingToReady(ctx context.Context, flow *models.Flow, sink *models.Sink, processingRecoveryInterval time.Duration) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveProcessingToReady", ctx, flow, sink, processingRecoveryInterval)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveProcessingToReady indicates an expected call of MoveProcessingToReady.
func (mr *MockProcessingRecoveryServiceMockRecorder) MoveProcessingToReady(ctx, flow, sink, processingRecoveryInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveProcessingToReady", reflect.TypeOf((*MockProcessingRecoveryService)(nil).MoveProcessingToReady), ctx, flow, sink, processingRecoveryInterval)
}
