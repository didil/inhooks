// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/message_builder.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	models "github.com/didil/inhooks/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageBuilder is a mock of MessageBuilder interface.
type MockMessageBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBuilderMockRecorder
}

// MockMessageBuilderMockRecorder is the mock recorder for MockMessageBuilder.
type MockMessageBuilderMockRecorder struct {
	mock *MockMessageBuilder
}

// NewMockMessageBuilder creates a new mock instance.
func NewMockMessageBuilder(ctrl *gomock.Controller) *MockMessageBuilder {
	mock := &MockMessageBuilder{ctrl: ctrl}
	mock.recorder = &MockMessageBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBuilder) EXPECT() *MockMessageBuilderMockRecorder {
	return m.recorder
}

// FromHttp mocks base method.
func (m *MockMessageBuilder) FromHttp(flow *models.Flow, r *http.Request, reqID string) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromHttp", flow, r, reqID)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromHttp indicates an expected call of FromHttp.
func (mr *MockMessageBuilderMockRecorder) FromHttp(flow, r, reqID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromHttp", reflect.TypeOf((*MockMessageBuilder)(nil).FromHttp), flow, r, reqID)
}
