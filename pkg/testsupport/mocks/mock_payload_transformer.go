// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/payload_transformer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/didil/inhooks/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPayloadTransformer is a mock of PayloadTransformer interface.
type MockPayloadTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadTransformerMockRecorder
}

// MockPayloadTransformerMockRecorder is the mock recorder for MockPayloadTransformer.
type MockPayloadTransformerMockRecorder struct {
	mock *MockPayloadTransformer
}

// NewMockPayloadTransformer creates a new mock instance.
func NewMockPayloadTransformer(ctrl *gomock.Controller) *MockPayloadTransformer {
	mock := &MockPayloadTransformer{ctrl: ctrl}
	mock.recorder = &MockPayloadTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadTransformer) EXPECT() *MockPayloadTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockPayloadTransformer) Transform(ctx context.Context, transformDefinition *models.TransformDefinition, payload []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", ctx, transformDefinition, payload)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockPayloadTransformerMockRecorder) Transform(ctx, transformDefinition, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockPayloadTransformer)(nil).Transform), ctx, transformDefinition, payload)
}
