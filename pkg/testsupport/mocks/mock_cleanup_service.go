// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/cleanup_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/didil/inhooks/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCleanupService is a mock of CleanupService interface.
type MockCleanupService struct {
	ctrl     *gomock.Controller
	recorder *MockCleanupServiceMockRecorder
}

// MockCleanupServiceMockRecorder is the mock recorder for MockCleanupService.
type MockCleanupServiceMockRecorder struct {
	mock *MockCleanupService
}

// NewMockCleanupService creates a new mock instance.
func NewMockCleanupService(ctrl *gomock.Controller) *MockCleanupService {
	mock := &MockCleanupService{ctrl: ctrl}
	mock.recorder = &MockCleanupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCleanupService) EXPECT() *MockCleanupServiceMockRecorder {
	return m.recorder
}

// CleanupDoneQueue mocks base method.
func (m *MockCleanupService) CleanupDoneQueue(ctx context.Context, f *models.Flow, sink *models.Sink, doneQueueCleanupDelay time.Duration) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupDoneQueue", ctx, f, sink, doneQueueCleanupDelay)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupDoneQueue indicates an expected call of CleanupDoneQueue.
func (mr *MockCleanupServiceMockRecorder) CleanupDoneQueue(ctx, f, sink, doneQueueCleanupDelay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupDoneQueue", reflect.TypeOf((*MockCleanupService)(nil).CleanupDoneQueue), ctx, f, sink, doneQueueCleanupDelay)
}
