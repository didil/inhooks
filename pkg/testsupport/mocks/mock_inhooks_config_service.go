// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/inhooks_config_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/didil/inhooks/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockInhooksConfigService is a mock of InhooksConfigService interface.
type MockInhooksConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockInhooksConfigServiceMockRecorder
}

// MockInhooksConfigServiceMockRecorder is the mock recorder for MockInhooksConfigService.
type MockInhooksConfigServiceMockRecorder struct {
	mock *MockInhooksConfigService
}

// NewMockInhooksConfigService creates a new mock instance.
func NewMockInhooksConfigService(ctrl *gomock.Controller) *MockInhooksConfigService {
	mock := &MockInhooksConfigService{ctrl: ctrl}
	mock.recorder = &MockInhooksConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInhooksConfigService) EXPECT() *MockInhooksConfigServiceMockRecorder {
	return m.recorder
}

// FindFlowForSource mocks base method.
func (m *MockInhooksConfigService) FindFlowForSource(sourceSlug string) *models.Flow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlowForSource", sourceSlug)
	ret0, _ := ret[0].(*models.Flow)
	return ret0
}

// FindFlowForSource indicates an expected call of FindFlowForSource.
func (mr *MockInhooksConfigServiceMockRecorder) FindFlowForSource(sourceSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlowForSource", reflect.TypeOf((*MockInhooksConfigService)(nil).FindFlowForSource), sourceSlug)
}

// GetFlow mocks base method.
func (m *MockInhooksConfigService) GetFlow(flowID string) *models.Flow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlow", flowID)
	ret0, _ := ret[0].(*models.Flow)
	return ret0
}

// GetFlow indicates an expected call of GetFlow.
func (mr *MockInhooksConfigServiceMockRecorder) GetFlow(flowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlow", reflect.TypeOf((*MockInhooksConfigService)(nil).GetFlow), flowID)
}

// GetFlows mocks base method.
func (m *MockInhooksConfigService) GetFlows() map[string]*models.Flow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlows")
	ret0, _ := ret[0].(map[string]*models.Flow)
	return ret0
}

// GetFlows indicates an expected call of GetFlows.
func (mr *MockInhooksConfigServiceMockRecorder) GetFlows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlows", reflect.TypeOf((*MockInhooksConfigService)(nil).GetFlows))
}

// GetTransformDefinition mocks base method.
func (m *MockInhooksConfigService) GetTransformDefinition(transformID string) *models.TransformDefinition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransformDefinition", transformID)
	ret0, _ := ret[0].(*models.TransformDefinition)
	return ret0
}

// GetTransformDefinition indicates an expected call of GetTransformDefinition.
func (mr *MockInhooksConfigServiceMockRecorder) GetTransformDefinition(transformID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformDefinition", reflect.TypeOf((*MockInhooksConfigService)(nil).GetTransformDefinition), transformID)
}

// Load mocks base method.
func (m *MockInhooksConfigService) Load(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockInhooksConfigServiceMockRecorder) Load(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockInhooksConfigService)(nil).Load), path)
}
